# Grace Event Schema Definitions
# Defines the structure and validation rules for events used in the TriggerMesh.

# This file serves as the single source of truth for event payloads.
# It can be used for validation, documentation, and code generation.

event_schemas:
  # KPI Events
  - event_type: "kpi.threshold_breach"
    description: "Fired when a monitored KPI crosses a predefined threshold."
    payload:
      metric_name: { type: "string", required: true }
      component_id: { type: "string", required: true }
      value: { type: "number", required: true }
      threshold: { type: "number", required: true }
      severity: { type: "string", required: true, enum: ["WARNING", "CRITICAL"] }

  - event_type: "kpi.metric_updated"
    description: "Fired every time a KPI metric is updated."
    payload:
      metric_name: { type: "string", required: true }
      component_id: { type: "string", required: true }
      value: { type: "number", required: true }

  # Trust Events
  - event_type: "trust.score_updated"
    description: "Fired when a component's trust score is recalculated."
    payload:
      component_id: { type: "string", required: true }
      old_score: { type: "number", required: true }
      new_score: { type: "number", required: true }
      reason: { type: "string", required: false }

  - event_type: "trust.degradation_detected"
    description: "Fired when trust score degradation exceeds a certain limit."
    payload:
      component_id: { type: "string", required: true }
      details: { type: "string", required: true }

  # Test Quality Events
  - event_type: "test_quality.healing_required"
    description: "Fired by the TestQualityMonitor when quality drops below a threshold."
    payload:
      component_id: { type: "string", required: true }
      status: { type: "string", required: true, enum: ["DEGRADED", "CRITICAL"] }
      score: { type: "number", required: true }
      severity: { type: "string", required: true, enum: ["DEGRADED", "CRITICAL"] } # Added for filter consistency

  - event_type: "test_quality.improvement_suggested"
    description: "Fired when the system identifies a potential improvement for test quality."
    payload:
      component_id: { type: "string", required: true }
      suggestion: { type: "string", required: true }

  # Self-Healing Events
  - event_type: "healing.escalation_requested"
    description: "Fired when a workflow escalates an issue to a kernel."
    payload:
      component_id: { type: "string", required: true }
      escalation_level: { type: "string", required: true, enum: ["AVN_CORE", "GOVERNANCE"] }
      trigger_event: { type: "object", required: true }

  - event_type: "healing.action_taken"
    description: "Fired by a kernel when it takes a corrective action."
    payload:
      component_id: { type: "string", required: true }
      action_name: { type: "string", required: true }
      result: { type: "string", required: true }

  - event_type: "healing.recovery_complete"
    description: "Fired when a component has successfully recovered after a healing action."
    payload:
      component_id: { type: "string", required: true }

  # Workflow Events
  - event_type: "workflow.started"
    description: "Fired when the WorkflowEngine begins executing a workflow."
    payload:
      workflow_name: { type: "string", required: true }
      trigger_payload: { type: "object", required: true }

  - event_type: "workflow.action_executed"
    description: "Fired after a workflow action is executed."
    payload:
      workflow_name: { type: "string", required: true }
      action_name: { type: "string", required: true }
      status: { type: "string", required: true, enum: ["SUCCESS", "FAILURE", "TIMEOUT"] }
      error: { type: "string", required: false }

  - event_type: "workflow.completed"
    description: "Fired when a workflow finishes all its actions."
    payload:
      workflow_name: { type: "string", required: true }

  # System Events
  - event_type: "system.kernel_started"
    description: "Fired when a core kernel initializes successfully."
    payload:
      kernel_name: { type: "string", required: true }
      timestamp: { type: "string", format: "date-time", required: true }

  - event_type: "system.critical_error"
    description: "Fired for critical, unhandled errors in core components."
    payload:
      source: { type: "string", required: true }
      error: { type: "string", required: true }

  # Database Events
  - event_type: "db.table_updated"
    description: "Fired when a row in a monitored database table is updated."
    payload:
      table_name: { type: "string", required: true }
      operation: { type: "string", required: true, enum: ["INSERT", "UPDATE", "DELETE"] }
      row_id: { type: "any", required: true }

  - event_type: "db.migration_applied"
    description: "Fired after a database migration is successfully applied."
    payload:
      migration_id: { type: "string", required: true }
      timestamp: { type: "string", format: "date-time", required: true }
