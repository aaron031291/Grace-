#!/usr/bin/env bash
set -euo pipefail

echo "------------------------------------------------------------"
echo " GRACE | Fix import shadowing + ensure config + run tests"
echo "------------------------------------------------------------"

REPO_ROOT="$(pwd)"
GRACE_DIR="$REPO_ROOT/grace"
PKG_DIR="$GRACE_DIR/config"
MOD_FILE="$GRACE_DIR/config.py"
DATA_DIR="$REPO_ROOT/grace_data"

TEMPLATE='# Auto-generated by fix_import_and_run.sh
from pathlib import Path
import os

_REPO_ROOT = Path(__file__).resolve().parents[1]

GRACE_DATA_DIR = Path(os.environ.get("GRACE_DATA_DIR", _REPO_ROOT / "grace_data"))
GRACE_DATA_DIR.mkdir(parents=True, exist_ok=True)

IMMUTABLE_LOG_PATH = GRACE_DATA_DIR / "immutable.audit.log"
TRUST_LEDGER_PATH  = GRACE_DATA_DIR / "trust_ledger.jsonl"

IMMUTABLE_LOG_PATH.touch(exist_ok=True)
TRUST_LEDGER_PATH.touch(exist_ok=True)

# Additional config attributes
ED25519_SK_HEX = os.getenv("GRACE_ED25519_SK", "").strip()
ED25519_PUB_HEX = os.getenv("GRACE_ED25519_PUB", "").strip()
WORKFLOW_DIR = os.getenv("GRACE_WORKFLOW_DIR", "grace/workflows")
CHECKPOINT_EVERY_N = int(os.getenv("GRACE_CHECKPOINT_EVERY_N", "100"))
'

mkdir -p "$DATA_DIR"
touch "$DATA_DIR/immutable.audit.log" "$DATA_DIR/trust_ledger.jsonl"

# Ensure grace/__init__.py exists
[[ -f "$GRACE_DIR/__init__.py" ]] || printf "" > "$GRACE_DIR/__init__.py"

# Create/patch config (prefer module file)
if [[ -d "$PKG_DIR" ]]; then
  echo "[config] Detected grace/config/ package"
  printf "%s" "$TEMPLATE" > "$PKG_DIR/__init__.py"
  echo "[config] Wrote attributes to $PKG_DIR/__init__.py"
else
  echo "[config] Using grace/config.py module"
  printf "%s" "$TEMPLATE" > "$MOD_FILE"
  echo "[config] Wrote $MOD_FILE"
fi

# Clear Python cache
echo "[cache] Clearing Python cache..."
find grace -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find grace -name "*.pyc" -delete 2>/dev/null || true

# Quick diagnostic: which 'grace' is Python importing?
echo "[diag] Import resolution BEFORE fixing sys.path:"
python3 - <<'PY'
import sys, importlib
mods = ['grace', 'grace.config']
for m in mods:
    try:
        if m in sys.modules: del sys.modules[m]
        mod = importlib.import_module(m)
        path = getattr(mod, '__file__', '<namespace>')
        print(f"  {m} -> {path}")
    except Exception as e:
        print(f"  {m} -> ERROR: {e}")
PY

# Force the repo root to the very front so it wins
export PYTHONPATH="$REPO_ROOT${PYTHONPATH+:$PYTHONPATH}"
echo "[env] PYTHONPATH set to: $PYTHONPATH"

# Verify we now import OUR grace.config and that attributes are Path objects
echo "[verify] Import resolution AFTER setting PYTHONPATH and attribute checks:"
python3 - <<'PY'
import sys, importlib
from pathlib import Path

for m in ['grace', 'grace.config']:
    if m in sys.modules: del sys.modules[m]
grace = importlib.import_module('grace')
cfg   = importlib.import_module('grace.config')

print("  grace.__file__      =", getattr(grace, '__file__', '<namespace>'))
print("  grace.config.__file__ =", getattr(cfg, '__file__', '<namespace>'))

for name in ("GRACE_DATA_DIR","IMMUTABLE_LOG_PATH","TRUST_LEDGER_PATH"):
    if not hasattr(cfg, name):
        raise AttributeError(f"missing {name}")
    val = getattr(cfg, name)
    print(f"  {name} =", val)
    assert isinstance(val, Path), f"{name} must be pathlib.Path"
print("[verify] ✅ Attributes present and correct types.")
PY

# Finally, run the E2E with our PYTHONPATH in place (no terminal exit)
echo "[run] Launching E2E…"
python3 run_full_e2e_test.py || echo "[run] ⚠️ Non-zero exit code; see logs above."

echo "------------------------------------------------------------"
echo " GRACE | Done."
echo "------------------------------------------------------------"
