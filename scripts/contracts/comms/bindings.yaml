bindings:
  governance:
    subscribes:
      - INTEL_REQUESTED
      - MLT_PLAN_PROPOSED
      - MLDL_DEPLOYMENT_REQUESTED
    publishes:
      - GOVERNANCE_APPROVED
      - GOVERNANCE_REJECTED
      - GOVERNANCE_NEEDS_REVIEW
    permissions:
      - "gov.approve"
      - "gov.reject"
      - "audit.write"

  mldl:
    subscribes: 
      - GOVERNANCE_APPROVED
      - MLT_PLAN_PROPOSED
      - INTEL_INFER_COMPLETED
    publishes:  
      - MLDL_TRAINING_STARTED
      - MLDL_CANDIDATE_READY
      - MLDL_EVALUATED
      - MLDL_DEPLOYMENT_REQUESTED
    permissions:
      - "mldl.train"
      - "mldl.deploy"
      - "mldl.evaluate"

  intelligence:
    subscribes: 
      - INTEL_REQUESTED
      - GOVERNANCE_APPROVED
    publishes:  
      - INTEL_INFER_COMPLETED
      - INTEL_POLICY_VIOLATION
    permissions:
      - "intel.infer"
      - "intel.specialist.access"

  ingress:
    subscribes:
      - GOVERNANCE_APPROVED  # for source configs
    publishes:  
      - ING_CAPTURED_RAW
      - ING_NORMALIZED
      - ING_PUBLISHED
    permissions:
      - "ingress.capture"
      - "ingress.normalize"
      - "memory.write"

  memory:
    subscribes:
      - MEM_READ
      - ING_PUBLISHED
      - MLT_EXPERIENCE
    publishes:  
      - MEM_WRITTEN
      - MEM_RESULT
    permissions:
      - "memory.read"
      - "memory.write"
      - "memory.query"

  interface:
    subscribes:
      - UI_NOTIFICATION
      - GOVERNANCE_APPROVED
      - GOVERNANCE_REJECTED
      - INTEL_INFER_COMPLETED
    publishes:  
      - UI_ACTION
      - UI_SESSION_STARTED
    permissions:
      - "ui.interact"
      - "ui.notify"

  orchestration:
    subscribes:
      - RES_SIGNAL
      - GOVERNANCE_APPROVED
    publishes:  
      - ORCH_TASK_DISPATCHED
      - ORCH_TASK_COMPLETED
    permissions:
      - "orch.dispatch"
      - "orch.coordinate"

  resilience:
    subscribes:
      - RES_SIGNAL
      - MLDL_EVALUATED      # for drift detection
      - MOS_HOST_HEALTH
    publishes:  
      - RES_INCIDENT_OPENED
      - RES_ACTION_APPLIED
      - RES_DEGRADATION_ENTERED
    permissions:
      - "res.monitor"
      - "res.respond"
      - "res.alert"

  multi_os:
    subscribes:
      - ORCH_TASK_DISPATCHED
    publishes:  
      - MOS_TASK_STARTED
      - MOS_TASK_COMPLETED
      - MOS_HOST_HEALTH
    permissions:
      - "mos.execute"
      - "mos.monitor"

  mlt:
    subscribes:
      - MLT_EXPERIENCE      # self-referential for feedback loops
      - GOVERNANCE_APPROVED
      - GOVERNANCE_REJECTED
    publishes:
      - MLT_INSIGHT_READY
      - MLT_PLAN_PROPOSED
      - MLT_EXPERIENCE
    permissions:
      - "mlt.learn"
      - "mlt.plan"
      - "mlt.insight"

# Cross-kernel communication patterns
communication_patterns:
  request_response:
    - requester: "interface"
      responder: "intelligence" 
      request_event: "INTEL_REQUESTED"
      response_event: "INTEL_INFER_COMPLETED"
      timeout_ms: 5000

  approval_workflow:
    - initiator: "mldl"
      approver: "governance"
      request_event: "MLDL_DEPLOYMENT_REQUESTED"
      approval_event: "GOVERNANCE_APPROVED"
      rejection_event: "GOVERNANCE_REJECTED"
      timeout_ms: 30000

  notification_fanout:
    - publisher: "resilience"
      subscribers: ["governance", "interface", "orchestration"]
      event: "RES_INCIDENT_OPENED"

# Event flow validation rules
validation_rules:
  - name: "governance_approval_required"
    description: "Deployment requests must be approved by governance"
    pattern: "MLDL_DEPLOYMENT_REQUESTED -> GOVERNANCE_* -> MLDL_*"
    
  - name: "experience_collection"
    description: "All kernel operations should generate experience events"
    pattern: "*_COMPLETED -> MLT_EXPERIENCE"