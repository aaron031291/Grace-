version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: ankane/pgvector:latest
    container_name: grace-postgres
    environment:
      POSTGRES_DB: grace_db
      POSTGRES_USER: grace_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-grace_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./grace/memory/db_setup.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grace_user -d grace_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grace-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: grace-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grace-network

  # Grace Application
  grace-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grace-app
    environment:
      - DATABASE_URL=postgresql://grace_user:${POSTGRES_PASSWORD:-grace_secure_password}@postgres:5432/grace_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./grace:/app/grace
      - ./tests:/app/tests
    networks:
      - grace-network
    command: python -m grace.memory.production_demo

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: grace-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - grace-network
    profiles:
      - monitoring

  # Grafana (optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grace-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - grace-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  grace-network:
    driver: bridge
