name: Grace CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy black
        pip install -e .
    
    - name: Run Black (code formatting check)
      run: black --check grace/ tests/ || true
    
    - name: Run Ruff (linting)
      run: ruff check grace/ tests/ || true
    
    - name: Run MyPy (type checking)
      run: mypy grace/ --ignore-missing-imports --no-strict-optional || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: grace
          POSTGRES_PASSWORD: grace_test_password
          POSTGRES_DB: grace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
    
    - name: Run verification script
      run: python scripts/verify_install.py
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://grace:grace_test_password@localhost:5432/grace_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        pytest tests/test_complete_system.py::TestEventSystem -v --tb=short
        pytest tests/test_complete_system.py::TestGovernanceEngine -v --tb=short
        pytest tests/test_complete_system.py::TestTrustSystem -v --tb=short
        pytest tests/test_complete_system.py::TestLLMIntegration -v --tb=short
        pytest tests/test_complete_system.py::TestUnifiedService -v --tb=short
        pytest tests/test_complete_system.py::TestDemoModules -v --tb=short
    
    - name: Run async memory tests (with DB)
      env:
        DATABASE_URL: postgresql://grace:grace_test_password@localhost:5432/grace_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        pytest tests/test_complete_system.py::TestAsyncMemoryLayers -v --tb=short || echo "Some async tests skipped due to missing dependencies"
    
    - name: Run component validation
      run: python scripts/validate_all_components.py || true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: grace
          POSTGRES_PASSWORD: grace_test_password
          POSTGRES_DB: grace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Test API server startup
      env:
        DATABASE_URL: postgresql://grace:grace_test_password@localhost:5432/grace_test
        ENVIRONMENT: testing
      run: |
        timeout 10 python -c "
        from grace.api import create_app
        app = create_app()
        print('✅ API app created successfully')
        " || echo "⚠️  API startup test timed out (expected for import-heavy app)"
    
    - name: Test CLI modes
      run: |
        python main.py --help
        echo "✅ CLI help works"

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run Safety (dependency vulnerability scan)
      run: |
        pip freeze | safety check --stdin || echo "⚠️  Some vulnerabilities found (non-blocking)"
    
    - name: Run Bandit (security linting)
      run: |
        bandit -r grace/ -f json -o bandit-report.json || true
        bandit -r grace/ || echo "⚠️  Some security issues found (non-blocking)"
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: grace
          POSTGRES_PASSWORD: grace_test_password
          POSTGRES_DB: grace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-cov
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://grace:grace_test_password@localhost:5432/grace_test
        ENVIRONMENT: testing
      run: |
        pytest tests/test_complete_system.py \
          --cov=grace \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          -v || echo "⚠️  Some tests failed but coverage collected"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-grace
        fail_ci_if_error: false
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, integration-tests, build-check, security-scan, coverage]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "CI Pipeline Summary"
        echo "==================="
        echo "Lint: ${{ needs.lint-and-type-check.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        echo "Build: ${{ needs.build-check.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
