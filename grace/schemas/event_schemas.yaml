# Event Schema Definitions for Grace TriggerMesh
# All events must conform to these schemas for validation and routing

version: "1.0.0"

# Base Event Schema - All events extend this
base_event:
  type: object
  required:
    - event_type
    - source
    - timestamp
    - correlation_id
  properties:
    event_type:
      type: string
      description: "Type of event (dot-notation namespace)"
    source:
      type: string
      description: "Component that emitted the event"
    timestamp:
      type: string
      format: iso8601
      description: "ISO 8601 timestamp of event occurrence"
    correlation_id:
      type: string
      description: "Unique ID for tracking related events"
    priority:
      type: string
      enum: [CRITICAL, HIGH, NORMAL, LOW]
      default: NORMAL
    payload:
      type: object
      description: "Event-specific data"

# ============================================================================
# KPI & Metrics Events
# ============================================================================

kpi.threshold_breach:
  extends: base_event
  payload:
    type: object
    required:
      - metric_name
      - component_id
      - value
      - threshold
      - severity
    properties:
      metric_name:
        type: string
        description: "Name of the KPI metric"
      component_id:
        type: string
        description: "Component being measured"
      value:
        type: number
        description: "Current metric value"
      threshold:
        type: number
        description: "Threshold that was breached"
      severity:
        type: string
        enum: [CRITICAL, WARNING, INFO]
      previous_value:
        type: number
        description: "Previous metric value"
      delta:
        type: number
        description: "Change in metric value"

kpi.metric_updated:
  extends: base_event
  payload:
    type: object
    required:
      - metric_name
      - component_id
      - value
    properties:
      metric_name:
        type: string
      component_id:
        type: string
      value:
        type: number
      tags:
        type: object
        description: "Additional metric tags"

# ============================================================================
# Trust Score Events
# ============================================================================

trust.score_updated:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - old_score
      - new_score
    properties:
      component_id:
        type: string
      old_score:
        type: number
        minimum: 0.0
        maximum: 1.0
      new_score:
        type: number
        minimum: 0.0
        maximum: 1.0
      confidence:
        type: number
        minimum: 0.0
        maximum: 1.0
      reason:
        type: string
        description: "Why the score changed"

trust.degradation_detected:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - current_score
      - degradation_rate
    properties:
      component_id:
        type: string
      current_score:
        type: number
      degradation_rate:
        type: number
        description: "Rate of score decrease per time unit"
      affected_metrics:
        type: array
        items:
          type: string

# ============================================================================
# Test Quality Events
# ============================================================================

test_quality.component_status_changed:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - old_status
      - new_status
      - score
    properties:
      component_id:
        type: string
      old_status:
        type: string
        enum: [CRITICAL, DEGRADED, ACCEPTABLE, PASSING, EXCELLENT]
      new_status:
        type: string
        enum: [CRITICAL, DEGRADED, ACCEPTABLE, PASSING, EXCELLENT]
      score:
        type: number
        minimum: 0
        maximum: 100
      gap_to_passing:
        type: number
        description: "Percentage points needed to reach 90% threshold"

test_quality.healing_required:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - status
      - score
      - severity
    properties:
      component_id:
        type: string
      status:
        type: string
        enum: [CRITICAL, DEGRADED]
      score:
        type: number
      severity:
        type: string
        enum: [CRITICAL, WARNING]
      recommended_actions:
        type: array
        items:
          type: string
      error_patterns:
        type: array
        items:
          type: object

test_quality.improvement_suggested:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - current_score
      - target_score
      - gap
    properties:
      component_id:
        type: string
      current_score:
        type: number
      target_score:
        type: number
        default: 90.0
      gap:
        type: number
      suggestions:
        type: array
        items:
          type: string

# ============================================================================
# Self-Healing Events
# ============================================================================

healing.escalation_requested:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - escalation_level
      - trigger_event
    properties:
      component_id:
        type: string
      escalation_level:
        type: string
        enum: [AVN_CORE, LEARNING_KERNEL, GOVERNANCE]
      trigger_event:
        type: object
        description: "The event that triggered escalation"
      context:
        type: object
        description: "Additional context for healing"

healing.action_taken:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - action_type
      - result
    properties:
      component_id:
        type: string
      action_type:
        type: string
      result:
        type: string
        enum: [SUCCESS, PARTIAL, FAILED]
      details:
        type: object
      latency_ms:
        type: number

healing.recovery_complete:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - previous_status
      - new_status
    properties:
      component_id:
        type: string
      previous_status:
        type: string
      new_status:
        type: string
      actions_taken:
        type: array
        items:
          type: string
      recovery_time_seconds:
        type: number

# ============================================================================
# Workflow Execution Events
# ============================================================================

workflow.started:
  extends: base_event
  payload:
    type: object
    required:
      - workflow_name
      - trigger_event
    properties:
      workflow_name:
        type: string
      trigger_event:
        type: object
      workflow_version:
        type: string

workflow.action_executed:
  extends: base_event
  payload:
    type: object
    required:
      - workflow_name
      - action_name
      - target_kernel
      - result
    properties:
      workflow_name:
        type: string
      action_name:
        type: string
      target_kernel:
        type: string
      result:
        type: string
        enum: [SUCCESS, FAILED, TIMEOUT]
      latency_ms:
        type: number
      error:
        type: string

workflow.completed:
  extends: base_event
  payload:
    type: object
    required:
      - workflow_name
      - status
      - total_actions
      - successful_actions
    properties:
      workflow_name:
        type: string
      status:
        type: string
        enum: [SUCCESS, PARTIAL_SUCCESS, FAILED]
      total_actions:
        type: integer
      successful_actions:
        type: integer
      total_latency_ms:
        type: number

# ============================================================================
# System Events
# ============================================================================

system.kernel_started:
  extends: base_event
  payload:
    type: object
    required:
      - kernel_name
    properties:
      kernel_name:
        type: string
      version:
        type: string
      configuration:
        type: object

system.kernel_stopped:
  extends: base_event
  payload:
    type: object
    required:
      - kernel_name
    properties:
      kernel_name:
        type: string
      reason:
        type: string
      uptime_seconds:
        type: number

system.critical_error:
  extends: base_event
  payload:
    type: object
    required:
      - component_id
      - error_type
      - error_message
    properties:
      component_id:
        type: string
      error_type:
        type: string
      error_message:
        type: string
      stack_trace:
        type: string
      context:
        type: object

# ============================================================================
# Database Events
# ============================================================================

db.table_updated:
  extends: base_event
  payload:
    type: object
    required:
      - table_name
      - operation
    properties:
      table_name:
        type: string
      operation:
        type: string
        enum: [INSERT, UPDATE, DELETE]
      record_id:
        type: string
      affected_rows:
        type: integer
      delta:
        type: object
        description: "Changes made to the record"

db.migration_applied:
  extends: base_event
  payload:
    type: object
    required:
      - migration_name
      - version
    properties:
      migration_name:
        type: string
      version:
        type: string
      status:
        type: string
        enum: [SUCCESS, FAILED]
      duration_ms:
        type: number
