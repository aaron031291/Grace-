#!/usr/bin/env bash
set -euo pipefail

echo "------------------------------------------------------------"
echo " GRACE | Repairing configuration (package vs module) + verify"
echo "------------------------------------------------------------"

REPO_ROOT="$(pwd)"
GRACE_DIR="$REPO_ROOT/grace"
PKG_DIR="$GRACE_DIR/config"          # if this exists, config is a PACKAGE
MOD_FILE="$GRACE_DIR/config.py"      # if this exists, config is a MODULE
DATA_DIR="$REPO_ROOT/grace_data"

TEMPLATE_CONTENT='# Auto-generated by repair_config_and_run.sh
from pathlib import Path
import os

# Resolve repo root two levels up from this file or package
_REPO_ROOT = Path(__file__).resolve().parents[1]

# Ensure data dir is a Path and exists
GRACE_DATA_DIR = Path(os.environ.get("GRACE_DATA_DIR", _REPO_ROOT / "grace_data"))
GRACE_DATA_DIR.mkdir(parents=True, exist_ok=True)

# Required paths
IMMUTABLE_LOG_PATH = GRACE_DATA_DIR / "immutable.audit.log"
TRUST_LEDGER_PATH  = GRACE_DATA_DIR / "trust_ledger.jsonl"

# Touch files so downstream code can open them
IMMUTABLE_LOG_PATH.touch(exist_ok=True)
TRUST_LEDGER_PATH.touch(exist_ok=True)

# Additional config attributes
ED25519_SK_HEX = os.getenv("GRACE_ED25519_SK", "").strip()
ED25519_PUB_HEX = os.getenv("GRACE_ED25519_PUB", "").strip()
WORKFLOW_DIR = os.getenv("GRACE_WORKFLOW_DIR", "grace/workflows")
CHECKPOINT_EVERY_N = int(os.getenv("GRACE_CHECKPOINT_EVERY_N", "100"))
'

# Ensure base dirs/files
mkdir -p "$DATA_DIR"
touch "$DATA_DIR/immutable.audit.log" "$DATA_DIR/trust_ledger.jsonl"

# Decide how to fix: package vs module
if [[ -d "$PKG_DIR" ]]; then
  # config is a PACKAGE; write attributes into its __init__.py
  echo "[config] Detected package: grace/config/"
  INIT_FILE="$PKG_DIR/__init__.py"
  echo "$TEMPLATE_CONTENT" > "$INIT_FILE"
  echo "[config] Wrote attributes to $INIT_FILE"
elif [[ -f "$MOD_FILE" ]]; then
  # config is a MODULE file; ensure it has the required attributes
  echo "[config] Detected module: grace/config.py"
  cp "$MOD_FILE" "$MOD_FILE.bak.$(date +%s)" || true
  echo "$TEMPLATE_CONTENT" > "$MOD_FILE"
  echo "[config] Rewrote $MOD_FILE with required Path attributes"
else
  # Neither exists; create a module file by default
  echo "[config] No config found; creating grace/config.py"
  echo "$TEMPLATE_CONTENT" > "$MOD_FILE"
fi

# Clear Python cache
echo "[cache] Clearing Python cache..."
find grace -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find grace -name "*.pyc" -delete 2>/dev/null || true

# Python-side verification with a clean import (clear caches)
echo "[verify] Importing grace.config and asserting types…"
python3 - <<'PY'
import sys, importlib
from pathlib import Path

# Make sure we're importing from the current working copy
if 'grace' in sys.modules:
    del sys.modules['grace']
if 'grace.config' in sys.modules:
    del sys.modules['grace.config']

import grace.config as config
importlib.reload(config)

print("  GRACE_DATA_DIR     =", config.GRACE_DATA_DIR)
print("  IMMUTABLE_LOG_PATH =", config.IMMUTABLE_LOG_PATH)
print("  TRUST_LEDGER_PATH  =", config.TRUST_LEDGER_PATH)

assert isinstance(config.GRACE_DATA_DIR, Path), "GRACE_DATA_DIR must be a pathlib.Path"
assert isinstance(config.IMMUTABLE_LOG_PATH, Path), "IMMUTABLE_LOG_PATH must be a pathlib.Path"
assert isinstance(config.TRUST_LEDGER_PATH, Path),  "TRUST_LEDGER_PATH must be a pathlib.Path"

# Ensure they live under the repo's grace_data dir
print("[verify] ✅ Path attributes exist and are pathlib.Path instances.")
PY

echo "[run] Launching end-to-end test (non-fatal on failure)…"
python3 run_full_e2e_test.py || echo "[run] ⚠️ Test completed with non-zero exit code — check logs above."

echo "------------------------------------------------------------"
echo " GRACE | Repair complete."
echo "------------------------------------------------------------"
