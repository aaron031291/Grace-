# TriggerMesh Production Workflows
# Defines event-driven workflows for KPI monitoring, trust management, and self-healing.

# Global configuration for all workflows in this file
configuration:
  max_parallel_workflows: 10
  default_timeout_ms: 15000
  rate_limiting:
    enabled: true
    max_events_per_minute: 100

workflows:
  # Critical KPI Degradation → AVN Core Healing
  - name: "kpi_critical_healing"
    description: "Escalates to AVN Core when a critical KPI threshold is breached."
    enabled: true
    
    trigger:
      event_type: "kpi.threshold_breach"
      filters:
        severity: "CRITICAL"
        # Only trigger if value dropped > 20% below threshold
        min_delta_percent: 20
      
    actions:
      - name: "Escalate to AVN Core"
        target: "avn_core.escalate_healing"
        priority: "CRITICAL"
        timeout_ms: 10000
        
        parameters:
          component_id: "{{ payload.component_id }}"
          metric_name: "{{ payload.metric_name }}"
          current_value: "{{ payload.value }}"
          threshold: "{{ payload.threshold }}"
          severity: "CRITICAL"
          context:
            trigger_event: "{{ event }}"
            recommended_actions:
              - "Review recent code changes"
              - "Check system resources"
              - "Verify dependencies"
              - "Run diagnostic tests"
        
        on_success:
          - event: "healing.escalation_requested"
            payload:
              component_id: "{{ payload.component_id }}"
              escalation_level: "AVN_CORE"
              trigger_event: "{{ event }}"
        
        on_failure:
          - event: "system.critical_error"
            payload:
              component_id: "trigger_mesh"
              error_type: "AVN_ESCALATION_FAILED"
    
    logging:
      source_metric: "{{ payload.metric_name }}"
      component: "{{ payload.component_id }}"
      triggered_kernel: "avn_core"
      outcome: "{{ action.result }}"
      latency_ms: "{{ action.latency_ms }}"

  # Warning KPI → Learning Kernel Adaptation
  - name: "kpi_warning_adaptation"
    description: "Notifies the Learning Kernel about a KPI warning for potential adaptation."
    enabled: true
    
    trigger:
      event_type: "kpi.threshold_breach"
      filters:
        severity: "WARNING"
      
    actions:
      - name: "Notify Learning Kernel"
        target: "learning_kernel.log_adaptation_opportunity"
        priority: "HIGH"
        timeout_ms: 15000
        
        parameters:
          component_id: "{{ payload.component_id }}"
          metric_name: "{{ payload.metric_name }}"
          metric_value: "{{ payload.value }}"

  # Trust Degradation → Governance Review
  - name: "trust_degradation_review"
    description: "Triggers a governance review when a component's trust score degrades significantly."
    enabled: true
    
    trigger:
      event_type: "trust.degradation_detected"
      filters:
        # Only trigger if score dropped below 0.7 (70%)
        max_score: 0.7
        min_degradation_rate: 0.05  # 5% drop per time unit
    
    actions:
      - name: "Request Governance Review"
        target: "governance.request_review"
        priority: "HIGH"
        timeout_ms: 20000
        
        parameters:
          component_id: "{{ payload.component_id }}"
          reason: "Trust score degradation"
          details: "{{ payload.details }}"

  # Critical Test Quality → AVN Escalation
  - name: "test_quality_critical_healing"
    description: "Engages AVN Core for immediate healing if test quality becomes critical."
    enabled: true
    
    trigger:
      event_type: "test_quality.healing_required"
      filters:
        severity: "CRITICAL"
        status: "CRITICAL"  # < 50% quality
    
    actions:
      - name: "Escalate Test Quality to AVN"
        target: "avn_core.escalate_healing"
        priority: "CRITICAL"
        timeout_ms: 10000
        
        parameters:
          component_id: "{{ payload.component_id }}"
          reason: "Critical test quality failure"
          score: "{{ payload.score }}"

  # Degraded Test Quality → Learning Kernel
  - name: "test_quality_degraded_learning"
    description: "Informs the Learning Kernel about degraded test quality."
    enabled: true
    
    trigger:
      event_type: "test_quality.healing_required"
      filters:
        severity: "WARNING"
        status: "DEGRADED"  # 50-70% quality
    
    actions:
      - name: "Log Test Quality Degradation"
        target: "learning_kernel.log_adaptation_opportunity"
        priority: "HIGH"
        timeout_ms: 15000
        
        parameters:
          component_id: "{{ payload.component_id }}"
          reason: "Degraded test quality"
          score: "{{ payload.score }}"

  # Quality Improvement Suggestions → Monitoring
  - name: "test_quality_improvement_tracking"
    description: "Tracks suggested test quality improvements in the memory core."
    enabled: true
    
    trigger:
      event_type: "test_quality.improvement_suggested"
      filters:
        # Track all improvement suggestions
        min_gap: 0.0
    
    actions:
      - name: "Store Improvement Suggestion"
        target: "memory_core.store_suggestion"
        priority: "NORMAL"
        timeout_ms: 5000
        
        parameters:
          suggestion_type: "test_quality"
          suggestion_data: "{{ payload }}"

  # Healing Recovery → Update Metrics
  - name: "healing_recovery_metrics"
    description: "Updates KPIs and trust scores after a successful self-healing action."
    enabled: true
    
    trigger:
      event_type: "healing.recovery_complete"
      filters:
        new_status: ["PASSING", "EXCELLENT", "ACCEPTABLE"]
    
    actions:
      - name: "Update KPI Monitor"
        target: "kpi_monitor.record_recovery"
        priority: "NORMAL"
        timeout_ms: 5000
        
        parameters:
          component_id: "{{ payload.component_id }}"
      
      - name: "Update Trust Score"
        target: "trust_monitor.boost_score_after_recovery"
        priority: "NORMAL"
        
        parameters:
          component_id: "{{ payload.component_id }}"

  # Critical DB Changes → Governance Audit
  - name: "db_critical_audit"
    description: "Logs a high-priority audit event for critical database table updates."
    enabled: true
    
    trigger:
      event_type: "db.table_updated"
      filters:
        table_name: 
          - "trust_scores"
          - "kpi_metrics"
          - "governance_decisions"
          - "constitutional_rules"
    
    actions:
      - name: "Log Critical DB Change"
        target: "immutable_logs.log_critical_event"
        priority: "HIGH"
        timeout_ms: 5000
        
        parameters:
          event_name: "CriticalDatabaseChange"
          event_data: "{{ payload }}"

  # Kernel Crash → AVN Emergency Response
  - name: "kernel_crash_response"
    description: "Initiates an emergency response when a core kernel crashes."
    enabled: true
    
    trigger:
      event_type: "system.critical_error"
      filters:
        error_type: 
          - "KERNEL_CRASH"
          - "UNHANDLED_EXCEPTION"
          - "RESOURCE_EXHAUSTION"
    
    actions:
      - name: "Trigger Emergency Alert"
        target: "governance.trigger_emergency_alert"
        priority: "CRITICAL"
        timeout_ms: 2000
        
        parameters:
          source: "{{ payload.source }}"
          error_message: "{{ payload.error }}"
      
      - name: "Attempt Kernel Restart"
        target: "system_manager.restart_kernel"
        priority: "CRITICAL"
        timeout_ms: 30000
        
        parameters:
          kernel_name: "{{ payload.source }}"
