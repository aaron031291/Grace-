name: Quality Gate

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  quality-checks:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: grace_test
          POSTGRES_PASSWORD: grace_test_pass
          POSTGRES_DB: grace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install build
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Run Quality Checks
      env:
        DATABASE_URL: postgresql://grace_test:grace_test_pass@localhost:5432/grace_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        AUTH_SECRET_KEY: test-secret-key-minimum-32-characters
      run: |
        bash scripts/run_quality_checks.sh
    
    - name: Run Golden Path Audits
      env:
        DATABASE_URL: postgresql://grace_test:grace_test_pass@localhost:5432/grace_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        AUTH_SECRET_KEY: test-secret-key-minimum-32-characters
      run: |
        python scripts/audit_golden_paths.py
    
    - name: Generate Coverage Report
      if: always()
      run: |
        pytest tests/ --cov=grace --cov-report=xml --cov-report=html || true
    
    - name: Upload Coverage
      if: always()
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-grace
    
    - name: Quality Gate Decision
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All quality checks passed!" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Golden path audits passed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "System is ready for merge! ðŸš€" >> $GITHUB_STEP_SUMMARY
