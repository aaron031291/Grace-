# Grace MCP Manifest: Patterns Domain
# Version: 1.0
# Owner: System (MCP executes full pipeline)
# Purpose: Pattern observation, storage, and semantic retrieval

mcp_version: "1.0"
domain: "patterns"
table: "observations"  # Patterns stored as observations with type='pattern'
owner: "system"  # System-owned, MCP handles vectorization

description: >
  Patterns are recurring behaviors, events, or insights observed across Grace's
  operation. They feed into the F-Loop for reflection and learning, helping the
  system identify systemic trends and opportunities for improvement.

auth:
  required: true
  roles_allowed:
    - "kernel"        # All kernels can observe patterns
    - "agent"         # Agents (MTLs) can submit patterns
    - "admin"         # Admins have full access
    - "human"         # Humans can manually log patterns

endpoints:
  # --- CREATE: Store new pattern with vectorization ---
  - name: "create"
    method: POST
    path: "/api/v1/patterns"
    description: "Create a new pattern observation with automatic embedding"
    
    request_schema:
      type: "PatternCreateRequest"
      required:
        - who        # Who observed it (component/agent/human)
        - what       # What is the pattern
        - where      # Where was it observed
        - when       # Timestamp
        - raw_text   # Full description for embedding
      optional:
        - why        # Why is it significant
        - how        # How was it detected
        - metadata   # Additional context
        - tags       # Categorization tags
    
    response_schema:
      type: "PatternResponse"
      fields:
        - id: "Pattern/observation ID"
        - observation_id: "O-Loop observation ID"
        - vector_id: "Vector store ID"
        - trust_score: "Caller's trust score applied"
        - created_at: "Timestamp"
    
    side_effects:
      vectorize: true
      vector_collection: "patterns_vectors"
      emit_event: "CREATED"
      log_immutable: true
      observe_meta_loop: true
      evaluate_outcome: true
    
    governance:
      sensitivity: "low"
      require_validation: false
      trust_threshold: 0.0
      
    rate_limiting:
      requests_per_minute: 100
      burst: 20
    
    observability:
      metrics:
        - "patterns.created.count"
        - "patterns.embedding.latency"
        - "patterns.embedding.cost"
      logs:
        - level: "info"
          message: "Pattern created: {id} by {caller}"

  # --- SEMANTIC_SEARCH: Find similar patterns ---
  - name: "semantic_search"
    method: POST
    path: "/api/v1/patterns/search"
    description: "Semantic search across pattern observations"
    
    request_schema:
      type: "SemanticSearchRequest"
      required:
        - query      # Natural language query
      optional:
        - top_k: 10              # Number of results
        - filters: {}            # Metadata filters
        - trust_threshold: 0.0   # Min trust score
        - include_metadata: true
    
    response_schema:
      type: "SemanticSearchResponse"
      fields:
        - query: "Original query"
        - results: "List of PatternSearchResult"
        - total_found: "Number of matches"
        - search_time_ms: "Query latency"
    
    semantics:
      vector_collection: "patterns_vectors"
      embedding_required: true
      trust_filter: true
      default_top_k: 10
      max_top_k: 100
      cache_ttl_seconds: 300
    
    side_effects:
      vectorize: true
      emit_event: "SEARCHED"
      log_immutable: false  # Too frequent
      observe_meta_loop: true
      evaluate_outcome: true
    
    governance:
      sensitivity: "medium"
      require_validation: false
      trust_threshold: 0.3  # Must have some trust to search
    
    rate_limiting:
      requests_per_minute: 60
      burst: 10
      cost_per_request: 0.001  # Embedding cost
    
    observability:
      metrics:
        - "patterns.search.count"
        - "patterns.search.latency"
        - "patterns.search.cache_hits"
        - "patterns.search.embedding_cost"

  # --- GET: Retrieve single pattern ---
  - name: "get"
    method: GET
    path: "/api/v1/patterns/{id}"
    description: "Retrieve single pattern by ID"
    
    request_schema:
      type: "PatternGetRequest"
      required:
        - id: "Pattern ID"
    
    response_schema:
      type: "PatternResponse"
      fields:
        - id: "Pattern ID"
        - data: "Full pattern data"
        - trust_score: "Current trust score"
        - metadata: "Additional metadata"
    
    side_effects:
      emit_event: "ACCESSED"
      log_immutable: false
      observe_meta_loop: false
    
    governance:
      sensitivity: "low"
      require_validation: false
    
    rate_limiting:
      requests_per_minute: 200
      burst: 50
    
    observability:
      metrics:
        - "patterns.get.count"

  # --- METADATA: Get provenance and lineage ---
  - name: "get_metadata"
    method: GET
    path: "/api/v1/patterns/{id}/metadata"
    description: "Get pattern metadata, provenance, and audit trail"
    
    request_schema:
      type: "PatternMetadataRequest"
      required:
        - pattern_id: "Pattern ID"
    
    response_schema:
      type: "PatternMetadataResponse"
      fields:
        - id: "Pattern ID"
        - trust_score: "Trust score"
        - provenance: "Creation provenance"
        - audit_trail: "Audit log entries"
        - related_observations: "Linked observations"
        - related_evaluations: "Linked evaluations"
    
    side_effects:
      emit_event: "METADATA_ACCESSED"
      log_immutable: false
    
    governance:
      sensitivity: "medium"
      require_validation: false
      trust_threshold: 0.5
    
    rate_limiting:
      requests_per_minute: 100
      burst: 20

  # --- LIST: List patterns with filters ---
  - name: "list"
    method: GET
    path: "/api/v1/patterns"
    description: "List patterns with filtering and pagination"
    
    request_schema:
      type: "PatternListRequest"
      optional:
        - filters: {}    # Metadata filters
        - limit: 50
        - offset: 0
        - order_by: "created_at DESC"
    
    response_schema:
      type: "PatternListResponse"
      fields:
        - patterns: "List of patterns"
        - total: "Total count"
        - limit: "Page size"
        - offset: "Page offset"
    
    side_effects:
      emit_event: false
      log_immutable: false
    
    governance:
      sensitivity: "low"
      require_validation: false
    
    rate_limiting:
      requests_per_minute: 100
      burst: 20

# --- Events emitted by this MCP ---
events:
  - event_type: "PATTERN.CREATED"
    description: "New pattern stored"
    payload:
      - id: "Pattern ID"
      - who: "Observer"
      - what: "Pattern description"
      - observation_id: "O-Loop observation ID"
    
  - event_type: "PATTERN.SEARCHED"
    description: "Semantic search performed"
    payload:
      - query: "Search query"
      - results_count: "Number of results"
      - search_time_ms: "Latency"
  
  - event_type: "PATTERN.ACCESSED"
    description: "Pattern retrieved"
    payload:
      - id: "Pattern ID"
      - caller: "Requester"
  
  - event_type: "PATTERN.ERROR"
    description: "Error during pattern operation"
    payload:
      - error: "Error message"
      - audit_id: "Audit log ID"

# --- Observability ---
observability:
  metrics:
    - "patterns.created.total"
    - "patterns.searches.total"
    - "patterns.embedding.latency_seconds"
    - "patterns.embedding.cost_dollars"
    - "patterns.vector.upsert.failures"
    - "patterns.cache.hits"
    - "patterns.cache.misses"
  
  logs:
    destination: "immutable_logs"
    format: "json"
    retention_days: 365
  
  traces:
    enabled: true
    sample_rate: 0.1  # 10% sampling

# --- Vectorization configuration ---
vectorization:
  enabled: true
  collection: "patterns_vectors"
  embedding_model: "system_default"
  embedding_dimensions: 1536
  distance_metric: "cosine"
  index_type: "hnsw"
  index_params:
    ef_construction: 200
    m: 16
  
  batch_size: 100
  batch_timeout_seconds: 5
  retry_attempts: 3
  retry_backoff_seconds: [1, 2, 4]

# --- Database schema ---
database:
  primary_table: "observations"
  filter:
    observation_type: "pattern"
  
  indexes:
    - columns: ["observation_type", "observed_at"]
      name: "idx_observations_type_time"
    - columns: ["source_module", "observed_at"]
      name: "idx_observations_source_time"
    - columns: ["json_extract(observation_data, '$.tags')"]
      name: "idx_observations_tags"
  
  retention:
    policy: "indefinite"
    archive_after_days: null

# --- Integration points ---
integrations:
  meta_loops:
    - "O-Loop: Records pattern as observation"
    - "E-Loop: Evaluates search quality and embedding success"
    - "F-Loop: Uses patterns for reflection and learning"
    - "V-Loop: Patterns inform evolution proposals"
  
  governance:
    - "Low sensitivity: No validation required"
    - "Trust threshold: 0.0 for create, 0.3 for search"
  
  avn:
    - "Escalates embedding failures"
    - "Escalates vector store unavailability"
  
  forensics:
    - "Critical errors create forensic cases"
    - "Audit trail preserved for investigations"

# --- Testing configuration ---
testing:
  mock_embedding: true
  mock_vector_store: true
  test_fixtures:
    - "grace/mcp/tests/fixtures/patterns.json"
  
  contract_tests:
    - "validate_request_schemas"
    - "validate_response_schemas"
    - "validate_governance_integration"
    - "validate_meta_loop_integration"
  
  performance_tests:
    - target_latency_p95: 200  # ms
    - target_latency_p99: 500  # ms
    - target_throughput: 100   # requests/sec

# --- Documentation ---
documentation:
  openapi: "grace/mcp/manifests/openapi/patterns.yaml"
  examples: "grace/mcp/manifests/examples/patterns/"
  readme: "grace/mcp/README.md#patterns-domain"

# --- Version history ---
version_history:
  - version: "1.0"
    date: "2025-10-14"
    changes:
      - "Initial manifest"
      - "Full CRUD + semantic search"
      - "Meta-Loop integration"
      - "Governance integration"
